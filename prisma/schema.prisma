generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_JvWjNXpsan18@ep-cool-bird-a8jsfcyj-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  image                 String?
  books                 Book[]
  reviews               Review[]
  chatMessages          ChatMessage[]
  discussions           Discussion[]
  readingGoals          ReadingGoal[]
  bookClubs             BookClub[]             @relation("BookClubMembers")
  bookClubMembers       BookClubMember[]
  readingStatistics     ReadingStatistics[]
  bookRecommendations   BookRecommendation[]
  challenges            Challenge[]            @relation("ChallengeParticipants")
  challengeParticipants ChallengeParticipant[]
  readingJournals       ReadingJournal[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  DiscussionReply       DiscussionReply[]
  ReadingStatistic      ReadingStatistic[]
}

model Book {
  id                String              @id @default(cuid())
  title             String
  author            String
  description       String?
  pages             Int
  status            String // 'reading', 'completed', 'to-read'
  progress          Int                 @default(0)
  rating            Int? // 1-5
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  reviews           Review[]
  chatMessages      ChatMessage[]
  discussions       Discussion[]
  readingStatistics ReadingStatistics[]
  readingJournals   ReadingJournal[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ReadingStatistic  ReadingStatistic[]
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  role      String // 'user' | 'assistant'
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Discussion {
  id        String            @id @default(cuid())
  title     String
  content   String
  bookId    String
  book      Book              @relation(fields: [bookId], references: [id])
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  replies   DiscussionReply[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model DiscussionReply {
  id           String     @id @default(cuid())
  content      String
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ReadingStatistic {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  pagesRead Int
  mood      String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())
}

model BookClub {
  id             String           @id @default(cuid())
  name           String
  description    String?
  members        User[]           @relation("BookClubMembers")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BookClubMember BookClubMember[]
}

model BookClubMember {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  bookClubId String
  bookClub   BookClub @relation(fields: [bookClubId], references: [id])
  role       String // 'member' | 'admin'
  joinedAt   DateTime @default(now())
  createdAt  DateTime @default(now())

  @@unique([userId, bookClubId])
}

model ReadingGoal {
  id          String                @id @default(cuid())
  userId      String
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  targetPages Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  progress    ReadingGoalProgress[]

  @@unique([userId, title])
}

model ReadingGoalProgress {
  id        String      @id @default(cuid())
  goalId    String
  goal      ReadingGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  date      DateTime
  pagesRead Int
  mood      String?
  createdAt DateTime    @default(now())

  @@unique([goalId, date])
}

model BookRecommendation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  author      String
  description String
  genre       String
  coverUrl    String?
  score       Float // AI-generated recommendation score
  reason      String // AI-generated recommendation reason
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, title])
}

model Challenge {
  id                   String                 @id @default(cuid())
  title                String
  description          String
  type                 String // 'pages', 'books', 'genre', 'author'
  target               Int
  startDate            DateTime
  endDate              DateTime
  reward               String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  participants         User[]                 @relation("ChallengeParticipants")
  ChallengeParticipant ChallengeParticipant[]
}

model ChallengeParticipant {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  progress    Int       @default(0)
  status      String // 'active', 'completed', 'failed'
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, challengeId])
}

model ReadingJournal {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  title     String
  content   String
  mood      String // 'happy', 'neutral', 'thoughtful', 'confused', 'inspired'
  progress  Int // Percentage of book completed
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId, title])
}

model ReadingStatistics {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  pagesRead Int
  mood      String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([userId, bookId, date])
}
